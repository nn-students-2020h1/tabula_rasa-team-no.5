#!/usr/local/bin/python3
# -*- coding: utf-8 -*-

import logging
import random
import time
import requests
import csv
import pymongo
import re

from setup import PROXY, TOKEN
from telegram import Bot, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext, CommandHandler, Filters, MessageHandler, Updater, ConversationHandler, CallbackQueryHandler
from datetime import datetime, date, timedelta
from functools import reduce

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

loglist = []
TODAY = (date.today() - timedelta(days=1)).strftime("%d.%m.%Y")

# Create Data base
client = pymongo.MongoClient('localhost', 27017)
db = client.logs
collection = db.logs
db_next = client.corona_data
corona = db_next.corona
db_todo = client.to_do_users
coll_todo = db_todo.todo

bot = Bot(
        token=TOKEN,
        base_url=PROXY,  # delete it if connection via VPN
    )


def mylogs(func):
    def inner(*args, **kwargs):
        update = args[0]
        global loglist
        if update and hasattr(update, 'message') and hasattr(update, 'effective_user'):
            loglist = [{
                'user': update.effective_user.first_name,
                'function': func.__name__,
                'message': update.message.text,
                'time': datetime.strftime(datetime.now(), "%Y.%m.%d %H:%M:%S"),
            }]
            collection.insert_one(loglist[0])

        return func(*args, **kwargs)

    return inner


def myerrors(func):
    def inner(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except:
            logger = logging.getLogger()
            print(logger)
            logger.warning()
            logging.basicConfig(format=u'%(levelname)-8s [%(asctime)s] %(message)s', level=logging.DEBUG,
                                filename=u'\\myError\\test.txt')
        return

    return inner


def get_data_from_site(url: str) -> dict:
    try:
        req = requests.get(url)
        if req.ok:
            return req.json()
    except Exception as err:
        print(f'Error occurred: {err}')


# Define a few command handlers. These usually take the two arguments update and
# context. Error handlers also receive the raised TelegramError object in error.


@mylogs
def start(update: Update, context: CallbackContext):
    """Send a message when the command /start is issued."""
    text = f'–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è —É–º–µ—é.'
    update.message.reply_text(text)
    return text


@mylogs
def chat_help(update: Update, context: CallbackContext):
    """Send a message when the command /help is issued."""
    update.message.reply_text('''–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
–£—á—ë–±–∞:
- /show_list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª
- /learn_text - –≤—ã—É—á–∏—Ç—å —Å—Ç–∏—Ö, —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ä–º—É –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
- /lofi - –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–π —Å—Ç—Ä–∏–º —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
- /corona - –≤—Å—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–µ –∏ –µ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–∏

–û—Ç–¥—ã—Ö:
- /cute - –∑–∞—Ä—è–¥ –º–∏–º–∏—à–Ω–æ—Å—Ç–∏ –æ—Ç –≥–∏—Ñ–æ–∫ —Å –º–∏–ª—ã–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏
- /get_clip - –ø–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ–∫–ª–∏–ø –∫ –ª—é–±–æ–π –ø–µ—Å–Ω–µ
- /funny_web - –ø–æ–ª—É—á–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π, –Ω–æ –∑–∞–±–∞–≤–Ω—ã–π —Å–∞–π—Ç
- /meme - –º–µ–º—ã —Å —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏—Ö –ø–∞–±–ª–∏–∫–æ–≤

–õ–∞–π—Ñ—Å—Ç–∞–π–ª:
- /food - –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥, —É–∂–∏–Ω –∏–ª–∏ –¥–∞–∂–µ –ø–µ—Ä–µ–∫—É—Å
- /training <—á–∞—Å—Ç—å —Ç–µ–ª–∞> - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –ª—é–±—É—é —á–∞—Å—Ç—å —Ç–µ–ª–∞, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ñ–æ—Ä–º–µ
- /mood <–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ> - –º—É–∑—ã–∫–∞ –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ''')


@mylogs
def user_id(update: Update, context: CallbackContext):
    """Send id of user"""
    text = f"–í–∞—à id: {update.message.from_user.id}"
    update.message.reply_text(text)
    return text

#PICTURE URL, GET PICTURE FROM WEBSITE, IF NEEDED

@mylogs
def picture_start(update: Update, context: CallbackContext):
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å')
    return 'url'


def get_picture(update: Update, context: CallbackContext):
    url = update.message.text
    try:
        r = requests.get(url)
        if r.status_code == 200:
            try:
                bot.send_photo(update.message.chat_id, url)
            except:
                print(r.text)
                match = re.findall(r'content="(https://.+jpg.+)"', r.text)
                print(match)
                if match:
                    bot.send_photo(update.message.chat_id, match[0])
                else:
                    update.message.reply_text('–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞')
        else:
            update.message.reply_text('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞')
    except:
        update.message.reply_text('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É')

    return ConversationHandler.END

#GET MUSIC VIDEO CLIP BY ENTERING NAME OF SONG

@mylogs
def clip(update: Update, context: CallbackContext):
    update.message.reply_text('–ù–∞ –∫–∞–∫—É—é –ø–µ—Å–Ω—é —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∫–ª–∏–ø?')
    return 'clip'

@mylogs
def get_clip(update: Update, context: CallbackContext):
    name = update.message.text
    url = 'https://www.youtube.com/results?search_query=' + '+'.join(name.split())
    r = requests.get(url)
    match = re.findall(r'href="(/watch\?v=\w{11})"', r.text)
    update.message.reply_text('https://www.youtube.com' + match[0])
    return ConversationHandler.END

#ALL THE FUNCTIONS BASED ON RANDOMISER

@mylogs
def fortune(update: Update, context: CallbackContext):
    """Send a random message from the list to the user"""
    update.message.reply_text('–ó–∞–¥—É–º–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å... \n –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–º!')
    for i in [3, 2, 1]:
        time.sleep(1)
        update.message.reply_text(f'...{i}...')
    time.sleep(1)
    list_answers = ["–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ", "–ù–µ —Å—Ç–æ–∏—Ç", "–ï—â—ë –Ω–µ –≤—Ä–µ–º—è", "–†–∏—Å–∫—É–π", "–í–æ–∑–º–æ–∂–Ω–æ", "–î—É–º–∞—é –¥–∞", "–î—É—Ö–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç",
                    '–ù–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å']
    text = f'–û—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å: {random.choice(list_answers)}'
    update.message.reply_text(text)
    return text


@mylogs
def food(update: Update, context: CallbackContext):
    update.message.reply_text("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –±–æ–≥–∞—Ç–æ–µ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ - –ø–æ–ª–æ–≤–∏–Ω–∞ —É—Å–ø–µ—Ö–∞!\n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å?")
    update.message.reply_text("/breakfast\n/lunch\n/dinner\n/snacks")


@mylogs
def breakfast(update: Update, context: CallbackContext):
    update.message.reply_text(
        '''–ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ —Ö–æ—Ä–æ—à–∏–π –∑–∞–≤—Ç—Ä–∞–∫ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–ª–æ–≥–æ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–ª—è.
     –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫–∞–∫–æ–π –∑–∞–≤—Ç—Ä–∞–∫ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ —É–¥–∞—á—É —Å–µ–≥–æ–¥–Ω—è?''')
    list_names = ["–ü–∞—Ä—Ñ–µ", "–§—Ä–∏—Ç—Ç–∞—Ç–∞", "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–º—É–∑–∏", "–ó–∞–ø–µ—á–µ–Ω–Ω—ã–µ —è–±–ª–æ–∫–∏", "–†–æ—Å–∫–æ—à–Ω—ã–µ –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã"]
    ingredients = {"–ü–∞—Ä—Ñ–µ": "- –ø–µ—á–µ–Ω–∏–µ \n- —Å–≥—É—â–µ–Ω–∫–∞ \n- —Å–ª–∏–≤–∫–∏ 33%\n- –ª–∏–º–æ–Ω", "–§—Ä–∏—Ç—Ç–∞—Ç–∞": "- —è–π—Ü–∞\n- –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å\n- –ª—É–∫",
                   "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–º—É–∑–∏": "- –±–∞–Ω–∞–Ω\n- –º–æ–ª–æ–∫–æ/–∫–µ—Ñ–∏—Ä/–π–æ–≥—É—Ä—Ç\n- –ª—é–±–∏–º—ã–π —Ñ—Ä—É–∫—Ç",
                   "–ó–∞–ø–µ—á–µ–Ω–Ω—ã–µ —è–±–ª–æ–∫–∏": "- —è–±–ª–æ–∫–∏\n- —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ\n- –æ—Ä–µ—Ö–∏\n- –∏–∑—é–º\n- —Å–∞—Ö–∞—Ä/–º—ë–¥",
                   "–†–æ—Å–∫–æ—à–Ω—ã–µ –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã": "- —Ö–ª–µ–±\n- –∞–≤–æ–∫–∞–¥–æ\n- —è–π—Ü–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n- –ø–æ–º–∏–¥–æ—Ä\n- –∑–µ–ª–µ–Ω—å (—à–ø–∏–Ω–∞—Ç/—Ä—É–∫–∫–æ–ª–∞/–ø–µ—Ç—Ä—É—à–∫–∞)\n- –ª–∏–º–æ–Ω"}
    recipes = {"–ü–∞—Ä—Ñ–µ": "https://www.youtube.com/watch?v=_7sku8rOZQk",
               "–§—Ä–∏—Ç—Ç–∞—Ç–∞": "https://www.youtube.com/watch?v=8ed-1VXYORU",
               "–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–º—É–∑–∏": "https://www.youtube.com/watch?v=FdLb_saOct4",
               "–ó–∞–ø–µ—á–µ–Ω–Ω—ã–µ —è–±–ª–æ–∫–∏": "https://www.youtube.com/watch?v=rxyE85xdoRY",
               "–†–æ—Å–∫–æ—à–Ω—ã–µ –±—É—Ç–µ—Ä–±—Ä–æ–¥—ã": "https://www.youtube.com/watch?v=SB3VdgW_-R0"}
    random_one = random.choice(list_names)
    update.message.reply_text(f'–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ–π –∑–∞–≤—Ç—Ä–∞–∫ —É–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - —ç—Ç–æ...')
    for i in [3, 2, 1]:
        update.message.reply_text(f"...{i}...")
        time.sleep(1)
    update.message.reply_text(f'...{random_one.lower()}!')
    text = f'–î–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ –±–ª—é–¥–∞ –∫–∞–∫ {random_one.lower()} —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:\n{ingredients[random_one]}.\n' \
           f'–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å: {recipes[random_one]}! \n–£–¥–∞—á–∏!'
    update.message.reply_text(text)
    return text


@mylogs
def snacks(update: Update, context: CallbackContext):
    update.message.reply_text(
        '''–ü—Ä–æ–≥–æ–ª–æ–¥–∞–ª—Å—è –∏ —Ö–æ—á–µ—Ç—Å—è —á–µ–≥–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ—Å—Ç–æ–≥–æ? \n –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫–∞–∫–æ–π –ø–µ—Ä–µ–∫—É—Å –ø–æ–¥–æ–π–¥–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ!''')
    list_names = ["—è–∏—á–Ω—ã–µ –±–ª–∏–Ω—á–∏–∫–∏ —Å –Ω–∞—á–∏–Ω–∫–æ–π", "–±—É—Ä—Ä–∏—Ç–æ –≤ –±–∞–Ω–∫–µ", "–∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ –ø–æ–º–∏–¥–æ—Ä—ã —Å —Å—ã—Ä–æ–º", "—Ä–æ–ª–ª—ã –∏–∑ –∫–∞–±–∞—á–∫–æ–≤", "–±–∞–Ω–∞–Ω–æ–≤—ã–µ –∫–µ–∫—Å—ã", "–º–∏–Ω–∏-–ø–∏—Ü—Ü—ã —Å –∫—É—Ä–∏—Ü–µ–π"]
    ingredients = {"—è–∏—á–Ω—ã–µ –±–ª–∏–Ω—á–∏–∫–∏ —Å –Ω–∞—á–∏–Ω–∫–æ–π" : "2 —è–π—Ü–∞;\n—Å–æ–ª—å ‚Äî –ø–æ –≤–∫—É—Å—É;\n–ø—Ä–∏–ø—Ä–∞–≤—ã ‚Äî –ø–æ –≤–∫—É—Å—É;\n50 –≥ –≤–∞—Ä—ë–Ω–æ–π –∏–Ω–¥–µ–π–∫–∏;\n50 –≥ –≥—Ä–µ—á–µ—Å–∫–æ–≥–æ –π–æ–≥—É—Ä—Ç–∞;\n50 —Å—ã—Ä–∞;\n1 —á–∞–π–Ω–∞—è –ª–æ–∂–∫–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Å–ª–∞.",
                   "–±—É—Ä—Ä–∏—Ç–æ –≤ –±–∞–Ω–∫–µ" : "1 –ø–æ–º–∏–¥–æ—Ä;\n1 –∑—É–±—á–∏–∫ —á–µ—Å–Ω–æ–∫–∞;\n1 –ª–æ–º—Ç–∏–∫ –ª–∏–º–æ–Ω–∞;\n1 —á–∞–π–Ω–∞—è –ª–æ–∂–∫–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Å–ª–∞;\n100 –≥ –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–∞—Å–æ–ª–∏;\n60 –≥ –Ω–µ–∂–∏—Ä–Ω–æ–≥–æ —Å—ã—Ä–∞;\n2 —Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏ –≥—Ä–µ—á–µ—Å–∫–æ–≥–æ –π–æ–≥—É—Ä—Ç–∞.",
                   "–∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ –ø–æ–º–∏–¥–æ—Ä—ã —Å —Å—ã—Ä–æ–º" : "3 –ø–æ–º–∏–¥–æ—Ä–∞;\n100 –≥ —Å—ã—Ä–∞;\n2 —Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞;\n—Å–æ–ª—å ‚Äî –ø–æ –≤–∫—É—Å—É;\n–ø–µ—Ä–µ—Ü ‚Äî –ø–æ –≤–∫—É—Å—É.",
                   "—Ä–æ–ª–ª—ã –∏–∑ –∫–∞–±–∞—á–∫–æ–≤" : "2 —Å—Ä–µ–¥–Ω–∏—Ö –∫–∞–±–∞—á–∫–∞ ‚Äî –æ–±—ã—á–Ω—ã—Ö –∏–ª–∏ —Ü—É–∫–∏–Ω–∏;\n1 —Å—Ç–æ–ª–æ–≤–∞—è –ª–æ–∂–∫–∞ –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞;\n3 —Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏ –≥—Ä–µ—á–µ—Å–∫–æ–≥–æ –π–æ–≥—É—Ä—Ç–∞;\n150 –≥ –≤–∞—Ä—ë–Ω–æ–π –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏;\n100 –≥ —Ñ–µ—Ç—ã;\n¬Ω –ª—É–∫–æ–≤–∏—Ü—ã;\n¬Ω –∫—Ä–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—Ü–∞;\n—Å–æ–ª—å ‚Äî –ø–æ –≤–∫—É—Å—É.",
                   "–±–∞–Ω–∞–Ω–æ–≤—ã–µ –∫–µ–∫—Å—ã" : "180 –≥ –æ–≤—Å—è–Ω–∫–∏ –∫—Ä—É–ø–Ω–æ–≥–æ –ø–æ–º–æ–ª–∞;\n1 —á–∞–π–Ω–∞—è –ª–æ–∂–∫–∞ —Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—è;\n1 —á–∞–π–Ω–∞—è –ª–æ–∂–∫–∞ –∫–æ—Ä–∏—Ü—ã;\n2 —Å–ø–µ–ª—ã—Ö –±–∞–Ω–∞–Ω–∞;\n2 —è–∏—á–Ω—ã—Ö –±–µ–ª–∫–∞;\n1 —Å—Ç–∞–∫–∞–Ω –º–æ–ª–æ–∫–∞.",
                   "–º–∏–Ω–∏-–ø–∏—Ü—Ü—ã —Å –∫—É—Ä–∏—Ü–µ–π" : "4 —Ç–æ—Ä—Ç–∏–ª—å–∏;\n400 –≥ –≤–∞—Ä—ë–Ω–æ–π –∫—É—Ä–∏–Ω–æ–π –≥—Ä—É–¥–∫–∏;\n150 –≥ —à–ø–∏–Ω–∞—Ç–∞;\n100 –≥ —Ç–≤–æ—Ä–æ–≥–∞;\n60 –≥ —Ç—ë—Ä—Ç–æ–≥–æ —Ç–≤—ë—Ä–¥–æ–≥–æ —Å—ã—Ä–∞;\n3 —Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏ –∫–µ—Ç—á—É–ø–∞;\n100 –≥ –º–æ—Ü–∞—Ä–µ–ª–ª—ã; \n1 —Å—Ç–æ–ª–æ–≤–∞—è –ª–æ–∂–∫–∞ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Å–ª–∞."}
    recipes = {"—è–∏—á–Ω—ã–µ –±–ª–∏–Ω—á–∏–∫–∏ —Å –Ω–∞—á–∏–Ω–∫–æ–π" : """–í–∑–±–µ–π—Ç–µ –≤ –º–∏—Å–∫–µ –æ–¥–Ω–æ —è–π—Ü–æ —Å —Å–æ–ª—å—é –∏ —Å–ø–µ—Ü–∏—è–º–∏. –†–∞–∑–æ–≥—Ä–µ–π—Ç–µ —Å–∫–æ–≤–æ—Ä–æ–¥—É, —Å–º–∞–∂—å—Ç–µ –º–∞—Å–ª–æ–º, –≤—ã–ª–µ–π—Ç–µ —è–π—Ü–æ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –µ–≥–æ –ø–æ –¥–Ω—É —Ç–æ–Ω–∫–∏–º —Å–ª–æ–µ–º. –ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–≤–µ—Ä–Ω–∏—Ç–µ –±–ª–∏–Ω—á–∏–∫ –∏ –≥–æ—Ç–æ–≤—å—Ç–µ –µ—â—ë –ø–æ–ª–º–∏–Ω—É—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å–æ –≤—Ç–æ—Ä—ã–º —è–π—Ü–æ–º.
–î–∞–π—Ç–µ –±–ª–∏–Ω—á–∏–∫–∞–º –Ω–µ–º–Ω–æ–≥–æ –æ—Å—Ç—ã—Ç—å, —Å–º–∞–∂—å—Ç–µ –π–æ–≥—É—Ä—Ç–æ–º. –ù–∞—Ä–µ–∂—å—Ç–µ –∏–Ω–¥–µ–π–∫—É –∏ —Å—ã—Ä —Ç–æ–Ω–∫–∏–º–∏ –ø–ª–∞—Å—Ç–∏–Ω–∫–∞–º–∏, –≤—ã–ª–æ–∂–∏—Ç–µ –≤ —Ü–µ–Ω—Ç—Ä —è–∏—á–Ω–æ–≥–æ –∫—Ä—É–≥–∞, —Å–≤–µ—Ä–Ω–∏—Ç–µ –±–ª–∏–Ω—á–∏–∫.""",
               "–±—É—Ä—Ä–∏—Ç–æ –≤ –±–∞–Ω–∫–µ" : """–ü–æ–º–∏–¥–æ—Ä –æ—à–ø–∞—Ä—å—Ç–µ –∫–∏–ø—è—Ç–∫–æ–º, —Å–Ω–∏–º–∏—Ç–µ —Å –Ω–µ–≥–æ –∫–æ–∂–∏—Ü—É, –Ω–∞—Ä—É–±–∏—Ç–µ –Ω–∞ –º–µ–ª–∫–∏–µ –∫—É—Å–æ—á–∫–∏ –∏–ª–∏ –∏–∑–º–µ–ª—å—á–∏—Ç–µ –±–ª–µ–Ω–¥–µ—Ä–æ–º. –î–æ–±–∞–≤—å—Ç–µ –≤ —Ç–æ–º–∞—Ç–Ω—É—é –º–∞—Å—Å—É —á–µ—Å–Ω–æ–∫, –ª–∏–º–æ–Ω–Ω—ã–π —Å–æ–∫ –∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ. –í—ã–ª–æ–∂–∏—Ç–µ —Å–æ—É—Å –≤ —Å—Ç–µ–∫–ª—è–Ω–Ω—É—é –±–∞–Ω–∫—É –Ω–∏–∂–Ω–∏–º —Å–ª–æ–µ–º. –°–≤–µ—Ä—Ö—É –ø–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞—Å–æ–ª—å, –∑–∞—Ç–µ–º —Ç—ë—Ä—Ç—ã–π —Å—ã—Ä. –í–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π ‚Äî –≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç.""",
               "–∑–∞–ø–µ—á–µ–Ω–Ω—ã–µ –ø–æ–º–∏–¥–æ—Ä—ã —Å —Å—ã—Ä–æ–º" : """–ü–æ–º–æ–π—Ç–µ –ø–æ–º–∏–¥–æ—Ä—ã, —Ä–∞–∑—Ä–µ–∂—å—Ç–µ –∏—Ö –ø–æ–ø–æ–ª–∞–º, –≤—ã–ª–æ–∂–∏—Ç–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–µ–Ω—å —Å—Ä–µ–∑–æ–º –≤–≤–µ—Ä—Ö. –°–º–∞–∂—å—Ç–µ –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º, –ø–æ—Å–æ–ª–∏—Ç–µ, –ø–æ–ø–µ—Ä—á–∏—Ç–µ –∏ –ø–æ—Å—ã–ø—å—Ç–µ —Ç—ë—Ä—Ç—ã–º —Å—ã—Ä–æ–º. –ó–∞–ø–µ–∫–∞–π—Ç–µ –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ 200 –≥—Ä–∞–¥—É—Å–æ–≤ 15‚Äì20 –º–∏–Ω—É—Ç.""",
               "—Ä–æ–ª–ª—ã –∏–∑ –∫–∞–±–∞—á–∫–æ–≤" : """–ö–∞–±–∞—á–∫–∏ –Ω–∞—Ä–µ–∂—å—Ç–µ –Ω–∞ —Ç–æ–Ω–∫–∏–µ –ø–ª–∞—Å—Ç–∏–Ω—ã, –ø–æ—Å–æ–ª–∏—Ç–µ, —Å–º–∞–∂—å—Ç–µ —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω –º–∞—Å–ª–æ–º –∏ –æ–±–∂–∞—Ä—å—Ç–µ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, –∑–∞—Ç–µ–º –¥–∞–π—Ç–µ –æ—Å—Ç—ã—Ç—å. –õ—É–∫–æ–≤–∏—Ü—É –∏ –ø–µ—Ä–µ—Ü –º–µ–ª–∫–æ –Ω–∞—Ä—É–±–∏—Ç–µ, –∫—É—Ä–∏—Ü—É –Ω–∞—Ä–µ–∂—å—Ç–µ –ª–æ–º—Ç–∏–∫–∞–º–∏.
–ü–ª–∞—Å—Ç–∏–Ω—É –∫–∞–±–∞—á–∫–∞ —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã —Å–º–∞–∂—å—Ç–µ –π–æ–≥—É—Ä—Ç–æ–º, –≤—ã–ª–æ–∂–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –∫—É—Ä–∏—Ü—É, –ø–µ—Ä–µ—Ü, –ª—É–∫. –°–≤–µ—Ä–Ω–∏—Ç–µ –ø–æ–ª–æ—Å–∫—É –≤ —Ä—É–ª–µ—Ç –∏ –≤—ã–ª–æ–∂–∏—Ç–µ –Ω–∞ —Ç–∞—Ä–µ–ª–∫—É —à–≤–æ–º –≤–Ω–∏–∑.""",
               "–±–∞–Ω–∞–Ω–æ–≤—ã–µ –∫–µ–∫—Å—ã" : """–ò–∑–º–µ–ª—å—á–∏—Ç–µ –±–∞–Ω–∞–Ω—ã –≤ –ø—é—Ä–µ. –°–º–µ—à–∞–π—Ç–µ –æ–≤—Å—è–Ω–∫—É, —Ä–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å –∏ –∫–æ—Ä–∏—Ü—É. –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã. –í—ã–ª–æ–∂–∏—Ç–µ –º–∞—Å—Å—É –≤ —Ñ–æ—Ä–º–æ—á–∫–∏ –¥–ª—è –∫–µ–∫—Å–æ–≤. –í—ã–ø–µ–∫–∞–π—Ç–µ 30 –º–∏–Ω—É—Ç –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ 180 –≥—Ä–∞–¥—É—Å–æ–≤. –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–æ—Å—Ç–∞–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –∏–∑–¥–µ–ª–∏—è, –¥–∞–π—Ç–µ –∏–º –æ—Å—Ç—ã—Ç—å –æ–∫–æ–ª–æ 10 –º–∏–Ω—É—Ç, –∏–Ω–∞—á–µ –æ–Ω–∏ –º–æ–≥—É—Ç —Ä–∞—Å—Å—ã–ø–∞—Ç—å—Å—è.""",
               "–º–∏–Ω–∏-–ø–∏—Ü—Ü—ã —Å –∫—É—Ä–∏—Ü–µ–π" : """–ù–∞—Ä–µ–∂—å—Ç–µ –∫—É—Ä–∏—Ü—É –∏ –º–æ—Ü–∞—Ä–µ–ª–ª—É –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫—É—Å–æ—á–∫–∞–º–∏, —Å–º–µ—à–∞–π—Ç–µ –∏—Ö —Å —Ç–≤–æ—Ä–æ–≥–æ–º, —Ç–≤—ë—Ä–¥—ã–º —Å—ã—Ä–æ–º, –∫–µ—Ç—á—É–ø–æ–º, —à–ø–∏–Ω–∞—Ç–æ–º.
–°–º–∞–∂—å—Ç–µ —Ñ–æ—Ä–º–æ—á–∫–∏ –¥–ª—è –∫–µ–∫—Å–æ–≤ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–º –º–∞—Å–ª–æ–º. –í—ã—Ä–µ–∂—å—Ç–µ –∏–∑ —Ç–æ—Ä—Ç–∏–ª—å–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –∫—Ä—É–∂–æ—á–∫–∏ –¥–∏–∞–º–µ—Ç—Ä–æ–º —á—É—Ç—å –±–æ–ª—å—à–µ —Ñ–æ—Ä–º–æ—á–µ–∫ –¥–ª—è –∫–µ–∫—Å–æ–≤. –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫—Ä—É–∂–∫–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Ç–∞–∫, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–Ω–æ –∏ –±–æ—Ä—Ç–∏–∫–∏ –±—É–¥—É—â–∏—Ö –ø–∏—Ü—Ü. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –Ω–∞—á–∏–Ω–∫–æ–π. –í—ã–ø–µ–∫–∞–π—Ç–µ –º–∏–Ω–∏-–ø–∏—Ü—Ü—ã –æ–∫–æ–ª–æ 20 –º–∏–Ω—É—Ç –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤ 220 –≥—Ä–∞–¥—É—Å–æ–≤."""}
    random_one = random.choice(list_names)
    update.message.reply_text(f'–ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ–π –ø–µ—Ä–µ–∫—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - —ç—Ç–æ...')
    time.sleep(1)
    update.message.reply_text(f'...{random_one.lower()}!')
    text = f'–î–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ç–∞–∫–æ–≥–æ –±–ª—é–¥–∞ –∫–∞–∫ {random_one.lower()} —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:\n{ingredients[random_one]}\n'
    update.message.reply_text(text)
    text = f'–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: {recipes[random_one]} \n–£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!'
    update.message.reply_text(text)
    return text


#MUSIC LOFI, STREAM

@mylogs
def lofi(update: Update, context: CallbackContext):
    text = '''–ò—â–µ—à—å –º—É–∑—ã–∫—É –Ω–∞ —Ñ–æ–Ω?
Lo-fi - –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!\n–í—ã–±–µ—Ä–∏ —Ç–æ—Ç —Å—Ç–∏–ª—å, —á—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ —Å–µ–π—á–∞—Å:
/chilledcow\n/jazzy_lofi\n/sad_lofi'''
    update.message.reply_text(text)


@mylogs
def sad_lofi(update: Update, context: CallbackContext):
    update.message.reply_text("–í–æ—Ç sleepy beats –¥–ª—è —Ç–µ–±—è:")
    update.message.reply_text("https://youtu.be/l7TxwBhtTUY")
    update.message.reply_text("–£–¥–∞—á–∏!")


@mylogs
def jazzy_lofi(update: Update, context: CallbackContext):
    update.message.reply_text("–í–æ—Ç —Ç–≤–æ–π lo-fi —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–∂–∞–∑–∞ –∏ —Ö–∏–ø-—Ö–æ–ø–∞:")
    update.message.reply_text("https://youtu.be/5yx6BWlEVcY")
    update.message.reply_text("–£–¥–∞—á–∏!")


@mylogs
def chilledcow(update: Update, context: CallbackContext):
    update.message.reply_text("–õ–æ–≤–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—Ç—Ä–∏–º Chilledcow:")
    update.message.reply_text("https://youtu.be/5qap5aO4i9A")
    update.message.reply_text("–£–¥–∞—á–∏!")


@mylogs
def mood(update: Update, context: CallbackContext):
    word = update.message.text.replace("/mood", "").strip()
    sad = ["–ø–µ—á–∞–ª", "–≥—Ä—É—Å—Ç", "–≥—Ä—É—â", "—Ç–æ—Å–∫"]
    happy = ["—Ä–∞–¥–æ—Å—Ç", '—Å—á–∞—Å—Ç–ª', "–≤–µ—Å–µ–ª", "–±–æ–¥—Ä"]
    sad_songs = {
        "Duncan Laurence - Arcade": 'https://dnl.megapesni.com/get/online/q2WZ8EJxc9x1YHlyngu_ng/1589939695/0eff4613/duncan-laurence-arcade-evrovidenie-2019-niderlandy.mp3',
        "Lewis Capaldi - Someone You Loved": 'https://dnl.megapesni.com/get/online/L-srxvGy8c-MuWupJ4OgkQ/1589939874/aea7fc3b/lewis-capaldi-someone-you-loved.mp3',
        "Dean Lewis - Be Alright": 'https://dnl.megapesni.com/get/online/7AVx1iv2e5sCig_3X6DLqQ/1589939947/2e928ed3/dean-lewis-be-alright.mp3'}
    happy_songs = {
        "OneRepublic - Everybody Loves Me": 'https://dnl.megapesni.com/get/online/l99bvzRzd7crj6xLoWsSFg/1589939547/93cdd231/one_republic_-_everybody_loves_me.mp3',
        "Rihanna - Towards The Sun": 'https://dnl.megapesni.com/get/online/Sc1iHRUt7pxjZa5FY_p-Vw/1589939577/79393a91/rihanna-towards-the-sun.mp3',
        "Neon Trees - Everybody Talks": 'https://dnl.megapesni.com/get/online/WxIQJyQiSieHyvUu31Jc6Q/1589939646/7b4f23ac/neon-trees-everybody-talks.mp3'}
    recognition = 0
    for i in sad:
        if i in word:
            song = random.choice(list(sad_songs.keys()))
            update.message.reply_text(f"–û—Ö, –º–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —Å–µ–±—è —Ç–∞–∫ —á—É–≤—Å—Ç–≤—É–µ—à—å!\n–ö–∞–∫ —Ç–µ–±–µ –≤–æ—Ç —Ç–∞–∫–∞—è –ø–µ—Å–Ω—è: {song}?")
            bot.send_audio(update.message.chat_id, sad_songs.get(song))
            recognition = 1
    for i in happy:
        if i in word:
            song = random.choice(list(happy_songs.keys()))
            update.message.reply_text(f"–û—Ç–ª–∏—á–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π!\n–ú–Ω–µ –æ—á–µ–Ω—å –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–∞ –ø–µ—Å–Ω—è: {song}, –∞ —Ç–µ–±–µ?")
            bot.send_audio(update.message.chat_id, happy_songs.get(song))
            recognition = 1
    if not recognition:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏—é –µ—â–µ —Ä–∞–∑, —É–∫–∞–∑–∞–≤ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!")

#ELSE, FACTS, RANDOM

@mylogs
def fact(update: Update, context: CallbackContext):
    url = 'https://cat-fact.herokuapp.com/facts'
    facts_dictionary = get_data_from_site(url)
    if facts_dictionary is None:
        return '[ERR] Could not retrieve most upvoted fact'
    maximum = 0
    most_liked = 'No most upvoted fact'
    for i in range(len(facts_dictionary['all'])):
        if facts_dictionary['all'][i]['upvotes'] > maximum:
            maximum = facts_dictionary['all'][i]['upvotes']
            most_liked = facts_dictionary['all'][i]['text']
    update.message.reply_text(most_liked)
    return most_liked


@mylogs
def random_fact(update: Update, context: CallbackContext):
    url = 'https://cat-fact.herokuapp.com/facts'
    facts_dictionary = get_data_from_site(url)
    if facts_dictionary is None:
        return '[ERR] Could not retrieve most upvoted fact'
    user = random.randint(0, len(facts_dictionary['all']) - 1)
    random_fact_t = facts_dictionary['all'][user]['text']
    update.message.reply_text(random_fact_t)
    return random_fact_t


@mylogs
def funny_web(update: Update, context: CallbackContext):
    update.message.reply_text("–ß—É–≤—Å—Ç–≤—É–µ—à—å —É—Å—Ç–∞–ª–æ—Å—Ç—å –æ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π?\n–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±—è —É–ª—ã–±–Ω—É—Ç—å—Å—è:")
    urls = ["http://corndog.io/", "http://eelslap.com/", "https://hooooooooo.com/", "https://trypap.com/"]
    update.message.reply_text(random.choice(urls))


@mylogs
def meme(update: Update, context: CallbackContext):
    public = ['https://vk.com/degradachan', 'https://vk.com/hsemem', 'https://vk.com/dasviduli.univerr',
              'https://vk.com/memengasu', 'https://vk.com/uneconmemes', 'https://vk.com/mgimo_reborn']
    i = random.randint(0, len(public) - 1)
    r1 = requests.get(public[i])
    print(r1.text)
    r2 = re.findall(r'https://vk/wall-147643048_4682\.com/wall-\d{1,20}_\d{1,6}\?reply=\d{1,6}', r1.text)
    pict = re.findall(r'https://sun9-\d+\.userapi\.com/\S{1,60}\.jpg', requests.get(r2[i]).text)
    bot.send_photo(update.message.from_user.id, pict[0])


@mylogs
def gifka(update: Update, context: CallbackContext):
    public = "https://vk.com/animal_gif"
    r1 = requests.get(public)
    thread = re.findall(r'/doc\d{1,20}_\d{1,20}?\S{1,54}', r1.text)
    gif = "https://vk.com/" + thread[random.randint(0, len(thread) - 1)]
    r2 = requests.get(gif)
    gifka = re.findall(r'"(https://psv.+?)"', r2.text)
    bot.send_animation(update.message.chat_id, gifka[0])


@mylogs
def training(update: Update, context: CallbackContext):
    muscle=update.message.text[10:]
    muscle = "https://www.youtube.com/results?search_query=—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ "+muscle
    r = requests.get(muscle)

    upr = re.findall(r'/watch\S{1,30}', r.text)
    upr="https://www.youtube.com/" + upr[0][:-1]
    update.message.reply_text("–í–∞—à–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: " + upr)


class AnalyseCSV:
    def __init__(self, day=None, yesterday=None):
        if not (day and yesterday):
            i = 0
            while True:
                day = (date.today() - timedelta(days=i)).strftime("%m-%d-%Y")
                if corona.find_one({'date': day}) is None:
                    r = requests.get(
                        f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{day}.csv')
                    if r.status_code == 200:
                        decoded_content = r.content.decode('utf-8')
                        cr = csv.DictReader(decoded_content.splitlines(), delimiter=',')
                        corona.insert_one({'date': day, 'info': list(cr)})
                    else:
                        i += 1
                else:
                    break
            yesterday = (date.today() - timedelta(days=i + 1)).strftime("%m-%d-%Y")
            if corona.find_one({'date': yesterday}) is None:
                r = requests.get(
                    f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{yesterday}.csv')
                if r.status_code == 200:
                    decoded_content = r.content.decode('utf-8')
                    cr = csv.DictReader(decoded_content.splitlines(), delimiter=',')
                    corona.insert_one({'date': yesterday, 'info': list(cr)})
        else:
            if corona.find_one({'date': day}) is None:
                r = requests.get(
                    f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{day}.csv')
                if r.status_code == 200:
                    decoded_content = r.content.decode('utf-8')
                    cr = csv.DictReader(decoded_content.splitlines(), delimiter=',')
                    corona.insert_one({'date': day, 'info': list(cr)})
                else:
                    day = None
            if corona.find_one({'date': yesterday}) is None:
                r = requests.get(
                    f'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{yesterday}.csv')
                if r.status_code == 200:
                    decoded_content = r.content.decode('utf-8')
                    cr = csv.DictReader(decoded_content.splitlines(), delimiter=',')
                    corona.insert_one({'date': yesterday, 'info': list(cr)})
                else:
                    yesterday = None
        if day and yesterday:
            self.data = corona.find_one({'date': day})['info']
            self.yesterday = corona.find_one({'date': yesterday})['info']
        else:
            self.data = []
            self.yesterday = []

    def count_all(self, parametr):
        suma = reduce(lambda a, x: a + x, [int(i[parametr]) for i in self.data if i[parametr].isdigit()])
        return suma

    def top_n(self, parametr, n=5):
        list_par = [int(i[parametr]) for i in self.data if i[parametr].isdigit()]
        list_par.sort(reverse=True)
        top = list_par[:n]
        return top

    def compare_days(self, parametr='Active', compare=False):
        try:
            self.data[-1]['Country_Region']
            country_write = 'Country_Region'
        except:
            country_write = 'Country/Region'

        try:
            self.yesterday[-1]['Country_Region']
            country_write_prev = 'Country_Region'
        except:
            country_write_prev = 'Country/Region'

        try:
            self.data[-1]['Active']
            self.yesterday[-1]['Active']
        except:
            parametr = 'Confirmed'

        countries = list(set([i[country_write] for i in self.data]))
        current = [{
            'Country': i,
            'Parametr': reduce(lambda a, x: a + x, [int(c[parametr])
                                                    for c in self.data
                                                    if c[parametr].isdigit() and c[country_write] == i], 0)
        } for i in countries]
        previous = [{
            'Country': i,
            'Parametr': reduce(lambda a, x: a + x, [int(c[parametr])
                                                    for c in self.yesterday
                                                    if c[parametr].isdigit() and c[country_write_prev] == i], 0)
        } for i in countries]
        if compare:
            comp = [{
                'Country': c['Country'],
                'Parametr': current[i]['Parametr'] - c['Parametr']
            } for i, c in enumerate(previous)]
            comp.sort(key=lambda d: d['Parametr'], reverse=True)
            return comp[:5]
        else:
            current.sort(key=lambda d: d['Parametr'], reverse=True)
            return current


@mylogs
def corona_world_dynamic(update: Update, context: CallbackContext):
    datte = update.message.text.split()
    if len(datte) == 1:
        corona_base = AnalyseCSV()

        suma_active = reduce(lambda a, x: a + int(x['Parametr']), corona_base.compare_days('Active', compare=True), 0)
        suma_death = reduce(lambda a, x: a + int(x['Parametr']), corona_base.compare_days('Deaths', compare=True), 0)
        suma_recovered = reduce(lambda a, x: a + int(x['Parametr']),
                                corona_base.compare_days('Recovered', compare=True), 0)

        text = '''–ú–∏—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å—É—Ç–∫–∏:
        –ù–æ–≤—ã—Ö –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö: {}
        –£–º–µ—Ä–ª–æ: {}
        –í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {}'''.format(suma_active, suma_death, suma_recovered)
    else:
        active, data = data_stats(datte, comp=True)
        death, data = data_stats(datte, par='Deaths', comp=True)
        recover, data = data_stats(datte, par='Recovered', comp=True)
        if isinstance(active, list):
            suma_active = reduce(lambda a, x: a + int(x['Parametr']), active, 0)
            suma_death = reduce(lambda a, x: a + int(x['Parametr']), death, 0)
            suma_recovered = reduce(lambda a, x: a + int(x['Parametr']), recover, 0)

            text = '''–ú–∏—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {}:
            –ù–æ–≤—ã—Ö –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö: {}
            –£–º–µ—Ä–ª–æ: {}
            –í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: {}'''.format(data, suma_active, suma_death, suma_recovered)
        else:
            text = active
    update.message.reply_text(text)
    return text


@mylogs
def corona_stats_dynamic(update: Update, context: CallbackContext):
    datte = update.message.text.split()
    if len(datte) == 1:
        corona_base = AnalyseCSV()
        text_list = [f'–°—Ç—Ä–∞–Ω–∞: {i["Country"]} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö: {i["Parametr"]}'
                     for i in corona_base.compare_days('Active', compare=True)][:5]
        text = f'5 —Å—Ç—Ä–∞–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –Ω–æ–≤—ã—Ö –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö ({TODAY})\n' + '\n'.join(text_list)
    else:
        result, data = data_stats(datte, comp=True)
        if isinstance(result, list):
            text_list = [f'–°—Ç—Ä–∞–Ω–∞: {i["Country"]} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö: {i["Parametr"]}'
                         for i in result[:5]]
            text = f'5 —Å—Ç—Ä–∞–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –Ω–æ–≤—ã—Ö –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö ({data})\n' + '\n'.join(text_list)
        else:
            text = result

    update.message.reply_text(text)
    return text


@mylogs
def corona_info(update: Update, context: CallbackContext):
    update.message.reply_text('''–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –ø–æ–ª—É—á–∏—Ç—å?
/corono_stats ‚Äì –ê–∫—Ç—É–∞–ª—å–Ω–∞—è (–∏–ª–∏ –ø–æ—á—Ç–∏) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 5 —Å—Ç—Ä–∞–Ω–∞—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ–º –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º
/corono_stats <–¥–∞—Ç–∞> ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 5 —Å—Ç—Ä–∞–Ω–∞—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ–º –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º –∑–∞ —ç—Ç—É –¥–∞—Ç—É
/corona_stats_dynamic ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 5 —Å—Ç—Ä–∞–Ω–∞—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –Ω–æ–≤—ã—Ö –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö
/corona_stats_dynamic <–¥–∞—Ç–∞> ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ 5 —Å—Ç—Ä–∞–Ω–∞—Ö —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –Ω–æ–≤—ã—Ö –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –¥–∞—Ç—É
/corona_world_stats_dynamic ‚Äì –ú–∏—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å—É—Ç–∫–∏
/corona_world_stats_dynamic <–¥–∞—Ç–∞> ‚Äì –ú–∏—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É
/symptoms ‚Äì –°–∏–º–ø—Ç–æ–º—ã –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞''')

@mylogs
def corono_stats(update: Update, context: CallbackContext):
    datte = update.message.text.split()

    if len(datte) == 1:
        corona_data = AnalyseCSV()
        corona_active = corona_data.compare_days('Active')[:]
        corona_active.sort(key=lambda d: d['Parametr'], reverse=True)
        text_list = [f'–°—Ç—Ä–∞–Ω–∞: {i["Country"]} | –ß–∏—Å–ª–æ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö: {i["Parametr"]}'
                     for i in corona_active][:5]
        text = f'5 —Å—Ç—Ä–∞–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö ({TODAY})\n' + '\n'.join(text_list)
    else:
        result, data = data_stats(datte)
        if isinstance(result, list):
            result.sort(key=lambda d: d['Parametr'], reverse=True)
            text_list = [f'–°—Ç—Ä–∞–Ω–∞: {i["Country"]} | –ß–∏—Å–ª–æ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö: {i["Parametr"]}' for i in result[:5]]
            text = f'5 —Å—Ç—Ä–∞–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º –∑–∞—Ä–∞–∂—ë–Ω–Ω—ã—Ö ({data})\n' + '\n'.join(text_list)
        else:
            text = result
    update.message.reply_text(text)
    return text


def data_stats(datte, par='Active', comp=False):
    match = re.fullmatch(r'(?:(?:[1-9]|[0-2]\d|3[01])\W(?:0?[1-9]|1[0-2]))|(?:(?:0?[1-9]|1[0-2])\W(?:[1-9]|[0-2]\d|3[01]))\W?(?:2019|2020)?$', datte[-1])
    if not match:
        result = '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞'
        data = None
    else:
        data = match.group()
        day = re.split(r'\W', data)
        if len(day) != 3:
            day.append('2020')
        try:
            days = date(int(day[-1]), int(day[1]), int(day[0])).strftime("%m-%d-%Y")
            if day[0] not in ['1', '01']:
                yests = date(int(day[-1]), int(day[1]), (int(day[0]) - 1)).strftime("%m-%d-%Y")
            else:
                try:
                    yests = date(int(day[-1]), int(day[1])-1, 31).strftime("%m-%d-%Y")
                except:
                    yests = date(int(day[-1]), int(day[1]) - 1, 30).strftime("%m-%d-%Y")
            corona = AnalyseCSV(days, yests)
            result = corona.compare_days(par, compare=comp)[:]
            if not len(result):
                result = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –¥–∞—Ç—É'
        except:
            try:
                days = date(int(day[-1]), int(day[0]), int(day[1])).strftime("%m-%d-%Y")
                if day[1] not in ['1', '01']:
                    yests = date(int(day[-1]), int(day[0]), (int(day[1]) - 1)).strftime("%m-%d-%Y")
                else:
                    try:
                        yests = date(int(day[-1]), (int(day[0]) - 1), 31).strftime("%m-%d-%Y")
                    except:
                        yests = date(int(day[-1]), (int(day[0]) - 1), 30).strftime("%m-%d-%Y")
                corona = AnalyseCSV(days, yests)
                result = corona.compare_days(par, compare=comp)[:]
                if not len(result):
                    result = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç—É –¥–∞—Ç—É'
            except:
                result = '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞'
    return result, data


@mylogs
def symptoms(update: Update, context: CallbackContext):
    text = '''–û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞:
 1. –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ–ª–∞ ü§í
 2. –ö–∞—à–µ–ª—å (—Å—É—Ö–æ–π –∏–ª–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–æ–∫—Ä–æ—Ç—ã) üò∑
 3. –û–¥—ã—à–∫–∞ ü•µ
 4. –ë–æ–ª—å –≤ –º—ã—à—Ü–∞—Ö üòñ
 5. –£—Ç–æ–º–ª—è–µ–º–æ—Å—Ç—å üò¥

–†–µ–¥–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞:
 1. –ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å ü§ï
 2. –ó–∞–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏ üò§
 3. –ö—Ä–æ–≤–æ—Ö–∞—Ä–∫–∞–Ω—å–µ ü§ß
 4. –î–∏–∞—Ä–µ—è üò£
 5. –¢–æ—à–Ω–æ—Ç–∞, —Ä–≤–æ—Ç–∞ ü§¢'''
    update.message.reply_text(text)
    return text


def history(update: Update, context: CallbackContext):
    """Send a message whe the command /history is issued."""
    len_base = collection.count_documents({'user': update.effective_user.first_name})
    if len_base == 0:
        update.message.reply_text('–í—ã –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
        text = '–í—ã –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
    elif len_base == 1:
        text = '–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
    elif len_base < 5:
        n = len_base
        text = f'–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {n} —Å–æ–æ–±—â–µ–Ω–∏—è:\n'
    else:
        text = f'–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π:\n'
    t = 1
    for user in collection.find({'user': update.effective_user.first_name}).sort('time', -1).limit(5):
        output = str(t) + '. ' + user['message'] + '\n'
        text += output
        t += 1
    update.message.reply_text(text)
    return text


def remove(update: Update, context: CallbackContext):
    """clear logs"""
    db.logs.delete_many({})
    update.message.reply_text('–¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã')


@mylogs
def echo(update: Update, context: CallbackContext):
    """Echo the user message."""
    text = update.message.text
    update.message.reply_text(update.message.text)
    return text


@mylogs
def error(update: Update, context: CallbackContext):
    """Log Errors caused by Updates."""
    erroring = context.error
    logger.warning(f'Update {update} caused error {erroring}')
    return erroring


poem_info = {'text': [], 'answers': [], 'result': []}

@mylogs
def learn_poem(update: Update, context: CallbackContext):
    update.message.reply_text('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Ç–∏—Ö, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –≤—ã—É—á–∏—Ç—å')
    return 'poem'


def poem(update: Update, context: CallbackContext):
    poem_info['text'] = [i.split('\n') for i in update.message.text.split('\n\n')]
    update.message.reply_text('–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n–õ–µ–≥–∫–∏–π\n–°—Ä–µ–¥–Ω–∏–π\n–°–ª–æ–∂–Ω—ã–π')
    return 'level'


def medium_lvl(update: Update, context: CallbackContext):
    lines = [len(c) for c in poem_info['text']]
    poem_info['answers'] = []
    text = ''
    not_list = [random.sample([a for a in range(int(i))], int(i) - 5) for i in lines if int(i) > 5]
    for m, c in enumerate(poem_info['text']):
        for i, n in enumerate(c):
            if len(not_list):
                if i != int(not_list[m]):
                    words = n.split(' ')
                    num = random.randint(0, len(words) - 1)
                    while len(words[num]) <= 2:
                        num = random.randint(0, len(words) - 1)
                    poem_info['answers'].append(words[num].lower())
                    words[num] = '______'
                    text += ' '.join(words) + '\n'
                else:
                    text += n + '\n'
            else:
                words = n.split(' ')
                num = random.randint(0, len(words) - 1)
                while len(words[num]) <= 2:
                    num = random.randint(0, len(words) - 1)
                poem_info['answers'].append(words[num].lower())
                words[num] = '______'
                text += ' '.join(words) + '\n'
    update.message.reply_text(text)
    return 'end'


def easy_lvl(update: Update, context: CallbackContext):
    poem_info['answers'] = []
    text = ''
    for c in poem_info['text']:
        i = random.randint(0, 1)
        for n in c:
            i += 1
            if i % 2:
                words = n.split(' ')
                num = random.randint(0, len(words) - 1)
                while len(words[num]) <= 2:
                    num = random.randint(0, len(words) - 1)
                poem_info['answers'].append(words[num].lower())
                words[num] = '______'
                line = ' '.join(words)
                text += line + '\n'
            else:
                text += n + '\n'
    update.message.reply_text(text)
    return 'end'


def hard_lvl(update: Update, context: CallbackContext):
    poem_info['answers'] = []
    text = ''
    for c in poem_info['text']:
        for n in c:
            words = n.split()
            for some in range(2):
                num = random.randint(0, len(words) - 1)
                if len(words) >= 2:
                    while words[num] == '______':
                        num = random.randint(0, len(words) - 1)
                poem_info['answers'].append(words[num].lower())
                words[num] = '______'
            line = ' '.join(words)
            text += line + '\n'
    update.message.reply_text(text)
    return 'end'


def check(update: Update, context: CallbackContext):
    if ',' in update.message.text:
        poem_info['result'] = update.message.text.split(', ')
    elif '\n' in update.message.text:
        list = update.message.text.replace('\n', ' ')
        poem_info['result'] = list.split()
    else:
        poem_info['result'] = update.message.text.split()
    mistake = {}
    correct = 0
    for i, c in enumerate(poem_info['answers']):
        word = ''
        for letter in c:
            if letter.isalpha() or letter == '-':
                if letter == '—ë':
                    letter = '–µ'
                word += letter
        if len(poem_info['result']) >= i:
            word_ch = poem_info['result'][i].lower()
            word_ch = word_ch.replace('—ë', '–µ')
        else:
            word_ch = '(–Ω–µ—Ç —Å–ª–æ–≤–∞)'
        if word_ch == word:
            correct += 1
        else:
            mistake[word_ch] = word
    text = ''
    text += '–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ' + str(correct) + '/' + str(len(poem_info['answers'])) + '\n'
    if len(mistake):
        text += '–¢–≤–æ–∏ –æ—à–∏–±–∫–∏: (–≤–∞—à –æ—Ç–≤–µ—Ç - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)' + '\n'
    for k, v in mistake.items():
        text += k + ' - ' + v + ' '
        _ = False
        for c in poem_info['text']:
            for char in c:
                if v in char.lower() and not _:
                    text += '(–≤ —Å—Ç—Ä–æ–∫–µ "' + char + '")' + '\n'
                    _ = True
    update.message.reply_text(text)
    return ConversationHandler.END


@mylogs
def show_list(update: Update, context: CallbackContext):
    if coll_todo.find_one({'user': update.effective_user.username}) is None:
        dictionary = {
            'user': update.effective_user.username,
            'todo_list': [],
            'achievements': [],
            'time': datetime.strftime(datetime.now(), "%Y.%m.%d %H:%M:%S")}
        coll_todo.insert_one(dictionary)
    todo_list = coll_todo.find({'user': update.effective_user.username}).sort('time', -1).limit(1)[0]['todo_list']
    if len(todo_list):
        text = '–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
        for i in range(len(todo_list)):
            text += str(i + 1) + '. ' + todo_list[i] + '\n'
    else:
        text = '–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª –ø–æ–∫–∞ –ø—É—Å—Ç\n'
    text += '\n–ß—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /edit_list'
    update.message.reply_text(text)


@mylogs
def do_list(update: Update, context: CallbackContext):
    if coll_todo.find_one({'user': update.effective_user.username}) is None:
        coll_todo.insert_one({'user': update.effective_user.username, 'todo_list': [], 'achievements': []})
    text = '''–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:
'–î–æ–±–∞–≤–∏—Ç—å' - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
'–ò–∑–º–µ–Ω–∏—Ç—å' - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
'–£–¥–∞–ª–∏—Ç—å' - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
'–û—á–∏—Å—Ç–∏—Ç—å' - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª
'–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' - —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
'–ì–æ—Ç–æ–≤–æ' —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª'''
    update.message.reply_text(text)
    return 'edit'


action = ''
doing = ''


def enter_todo(update: Update, context: CallbackContext):
    global action
    action = update.message.text.lower()
    todo_list = coll_todo.find({'user': update.effective_user.username}).sort('time', -1).limit(1)[0]['todo_list']
    achievements = coll_todo.find({'user': update.effective_user.username}).sort('time', -1).limit(1)[0]['achievements']
    if action == '–¥–æ–±–∞–≤–∏—Ç—å':
        update.message.reply_text('–ö–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫?')
        return 'action'
    elif action == '–∏–∑–º–µ–Ω–∏—Ç—å':
        text = '–ö–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –∏–∑–º–µ–Ω–∏—Ç—å? (—á–∏—Å–ª–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)\n'
        for i in range(len(todo_list)):
            text += str(i + 1) + '. ' + todo_list[i] + '\n'
        update.message.reply_text(text)
        return 'new'
    elif action == '—É–¥–∞–ª–∏—Ç—å':
        text = '–ö–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞? (—á–∏—Å–ª–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)\n'
        for i in range(len(todo_list)):
            text += str(i + 1) + '. ' + todo_list[i] + '\n'
        update.message.reply_text(text)
        return 'action'
    elif action == '–æ—á–∏—Å—Ç–∏—Ç—å':
        update.message.reply_text('–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫?')
        return 'action'
    elif action == '–≥–æ—Ç–æ–≤–æ':
        update.message.reply_text('–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã!')
        return ConversationHandler.END
    elif action == '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è':
        if len(achievements):
            text = '–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
            for i in range(len(achievements)):
                text += str(i + 1) + '. ' + achievements[i] + '\n'
        else:
            text = '–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç\n'
        update.message.reply_text(text)
        return 'edit'
    else:
        update.message.reply_text('–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø–∏—à–∏ "–≥–æ—Ç–æ–≤–æ", —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ–ª.')
        return 'edit'


def new_todo(update: Update, context: CallbackContext):
    global action, doing
    doing = update.message.text
    todo_list = coll_todo.find({'user': update.effective_user.username}).sort('time', -1).limit(1)[0]['todo_list']
    if action == '–∏–∑–º–µ–Ω–∏—Ç—å':
        if doing.isdigit() and int(doing) <= len(todo_list)+1:
            update.message.reply_text('–í–≤–µ–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ')
        else:
            update.message.reply_text('–ù–µ—Ç –∑–∞–¥–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º')
            return 'edit'
    return 'action'


def edit_list(update: Update, context: CallbackContext):
    global action, doing
    todo = update.message.text
    todo_list = coll_todo.find({'user': update.effective_user.username}).sort('time', -1).limit(1)[0]['todo_list']
    achievements = coll_todo.find({'user': update.effective_user.username}).sort('time', -1).limit(1)[0]['achievements']
    if action == '–¥–æ–±–∞–≤–∏—Ç—å':
        todo_list.append(todo)
        text = '–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
        for i in range(len(todo_list)):
            text += str(i + 1) + '. ' + todo_list[i] + '\n'
        update.message.reply_text(text)

    elif action == '–∏–∑–º–µ–Ω–∏—Ç—å':
        if doing.isdigit():
            todo_list[int(doing) - 1] = todo
        else:
            for ind, do in enumerate(do_list):
                if todo in do:
                    todo_list[ind] = todo
                    break
        text = '–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
        for i in range(len(todo_list)):
            text += str(i + 1) + '. ' + todo_list[i] + '\n'
        update.message.reply_text(text)

    elif action == '—É–¥–∞–ª–∏—Ç—å':
        if todo.isdigit():
            if len(todo_list):
                achievements.append(todo_list[int(todo) - 1])
                if todo == '1':
                    todo_list.pop()
                else:
                    todo_list.pop(int(todo) - 1)
            else:
                update.message.reply_text('–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª –ø–æ–∫–∞ –ø—É—Å—Ç')
        else:
            for ind, do in enumerate(todo_list):
                if todo in do:
                    achievements.append(todo_list[ind])
                    todo_list.pop(ind)
                    break
        if len(todo_list):
            text = '–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n'
            for i in range(len(todo_list)):
                text += str(i + 1) + '. ' + todo_list[i] + '\n'
        else:
            text = '–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –¥–µ–ª –ø–æ–∫–∞ –ø—É—Å—Ç\n'
        update.message.reply_text(text)
        return 'edit'


    elif action == '–æ—á–∏—Å—Ç–∏—Ç—å':
        if todo.lower() == '–¥–∞':
            todo_list = []
            update.message.reply_text('–°–ø–∏—Å–æ–∫ –¥–µ–ª –æ—á–∏—â–µ–Ω.')
        elif todo.lower() == '–Ω–µ—Ç':
            text = ''
            for i in range(len(todo_list)):
                text += str(i + 1) + '. ' + todo_list[i] + '\n'
            update.message.reply_text(text)
            return 'edit'
        else:
            update.message.reply_text('–¢–∞–∫ –¥–∞ –∏–ª–∏ –Ω–µ—Ç?')
            return 'action'

    coll_todo.insert_one({'user': update.effective_user.username, 'todo_list': todo_list, 'achievements': achievements, 'time': datetime.strftime(datetime.now(), "%Y.%m.%d %H:%M:%S")})
    return 'edit'


def main():
    bot = Bot(
        token=TOKEN,
        base_url=PROXY,  # delete it if connection via VPN
    )
    updater = Updater(bot=bot, use_context=True)
    # const

    # on different commands - answer in Telegram
    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CommandHandler('help', chat_help))
    updater.dispatcher.add_handler(CommandHandler('history', history))
    updater.dispatcher.add_handler(CommandHandler('remove', remove))
    updater.dispatcher.add_handler(CommandHandler('myid', user_id))
    updater.dispatcher.add_handler(CommandHandler('fortune', fortune))
    updater.dispatcher.add_handler(CommandHandler('fact', fact))
    updater.dispatcher.add_handler(CommandHandler('randomfact', random_fact))
    updater.dispatcher.add_handler(CommandHandler('corona', corona_info))
    updater.dispatcher.add_handler(CommandHandler('corono_stats', corono_stats))
    updater.dispatcher.add_handler(CommandHandler('corona_stats_dynamic', corona_stats_dynamic))
    updater.dispatcher.add_handler(CommandHandler('corona_world_stats_dynamic', corona_world_dynamic))
    updater.dispatcher.add_handler(CommandHandler('symptoms', symptoms))
    updater.dispatcher.add_handler(CommandHandler('show_list', show_list))
    updater.dispatcher.add_handler(CommandHandler('lofi', lofi))
    updater.dispatcher.add_handler(CommandHandler('jazzy_lofi', jazzy_lofi))
    updater.dispatcher.add_handler(CommandHandler('sad_lofi', sad_lofi))
    updater.dispatcher.add_handler(CommandHandler('chilledcow', chilledcow))
    updater.dispatcher.add_handler(CommandHandler('funny_web', funny_web))
    updater.dispatcher.add_handler(CommandHandler('mood', mood))
    updater.dispatcher.add_handler(CommandHandler('food', food))
    updater.dispatcher.add_handler(CommandHandler('snacks', snacks))
    updater.dispatcher.add_handler(CommandHandler('breakfast', breakfast))
    updater.dispatcher.add_handler(CommandHandler('cute', gifka))
    updater.dispatcher.add_handler(CommandHandler('meme', meme))
    updater.dispatcher.add_handler(CommandHandler('training', training))

    updater.dispatcher.add_handler(ConversationHandler(entry_points=[MessageHandler(Filters.regex('/get_picture'), picture_start)],
                                                       states={'url': [MessageHandler(Filters.text, get_picture)]},
                                                       fallbacks=[MessageHandler(Filters.text, error)]))
    updater.dispatcher.add_handler(
        ConversationHandler(entry_points=[MessageHandler(Filters.regex('/get_clip'), clip)],
                            states={'clip': [MessageHandler(Filters.text, get_clip)]},
                            fallbacks=[MessageHandler(Filters.text, error)]))

    updater.dispatcher.add_handler(
        ConversationHandler(entry_points=[MessageHandler(Filters.regex('/edit_list'), do_list)],
                            states={'edit': [MessageHandler(Filters.text, enter_todo)],
                                    'new': [MessageHandler(Filters.text, new_todo)],
                                    'action': [MessageHandler(Filters.text, edit_list)]},
                            fallbacks=[MessageHandler(Filters.text, error)]))

    updater.dispatcher.add_handler(
        ConversationHandler(entry_points=[MessageHandler(Filters.regex('/learn_text'), learn_poem)],
                            states={'poem': [MessageHandler(Filters.text, poem)],
                                    'level': [MessageHandler(Filters.regex('–õ–µ–≥–∫–∏–π'), easy_lvl),
                                              MessageHandler(Filters.regex('–°—Ä–µ–¥–Ω–∏–π'), medium_lvl),
                                              MessageHandler(Filters.regex('–°–ª–æ–∂–Ω—ã–π'), hard_lvl)],
                                    'end': [MessageHandler(Filters.text, check)]},
                            fallbacks=[MessageHandler(Filters.text, error)]))

    # on noncommand i.e message - echo the message on Telegramr
    updater.dispatcher.add_handler(MessageHandler(Filters.text, echo))

    # log all errors
    updater.dispatcher.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    logger.info('Start Bot')
    main()
